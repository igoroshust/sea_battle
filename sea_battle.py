from random import randint

"""Морской бой"""
def greet():
    print(f"""{'~' * 20}
Добро пожаловать
в игру
морской бой
{'~' * 20}
формат ввода: x y
x - номер строки
y - номер столбца""")

class BoardException(Exception):
    """Общий класс, содержащий в себе все остальные классы исключений.
    Если мы хотим отловить несколько исключений, то их не нужно прописывать по отдельности"""
    pass

class BoardOutException(BoardException):
    """Если пользователь выстрелит за пределы доски, сработает это исключение. Пользовательский класс исключений"""
    def __str__(self):
        return "Вы пытаетесь выстрелить за пределы доски!"

class BoardUsedException(BoardException):
    """Если пользователь выстрелит в уже задействованную клетку, сработает это исключение. Пользовательский класс исключений."""
    def __str__(self):
        return "Вы уже стреляли в эту клетку!"

class BoardWrongShipException(BoardException):
    """Исключение для беспрепятственного размещения кораблей. Пользователю данное исключение не отображается."""
    pass

# ----------------------------------------------------------------------------------------------------------------------

class Dot:
    """Класс, содержащий все точки корабля на поле"""
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        """Сравнение точек"""
        return self.x == other.x and self.y == other.y

    def __repr__(self):
        """Вывод точек в консоль"""
        return f"Dot({self.x}, {self.y})"

# ----------------------------------------------------------------------------------------------------------------------
class Ship:
    """Класс Корабль"""
    def __init__(self, bow, l, o):
        self.bow = bow # нос корабля
        self.l = l # длина корабля
        self.o = o # ориентация корабля (0 - вертикальный, 1 - горизонтальный)
        self.lives = l # жизнь корабля измеряется его длинной

    @property # декоратор @property позволяет организовать класс так, чтобы скрыть внутреннюю структуру класса, оставив видимым только нужный API.
    def dots(self):
        ship_dots = [] # список с точками всего корабля
        for i in range(self.l): # проходимся в цикле по значениям от 0 до (длинны корабля - 1)
            cur_x = self.bow.x # текущая точка корабля
            cur_y = self.bow.y # текущая точка корабля

            if self.o == 0: # шаг на одну клетку относительно ориентации корабля
                cur_x += i

            elif self.o == 1: # шаг на одну клетку относительно ориентации корабля
                cur_y += i

            ship_dots.append(Dot(cur_x, cur_y)) # добавляем значение в список

        return ship_dots

    def shooten(self, shot):
        """Проверка на попадание"""
        return shot in self.dots


# s = Ship(Dot(1, 2), 4, 0) # передаём координаты корабля в экземпляре

# ----------------------------------------------------------------------------------------------------------------------

class Board:
    """Игровое поле"""
    def __init__(self, hid=False, size=6):
        self.hid = hid  # hid - нужно ли скрывать поле?
        self.size = size # размер поля

        self.count = 0 # количество поражённых кораблей

        self.field = [["0"] * size for _ in range(size)] # сетка, в которой храним состояние клеток

        self.busy = [] # занятые точки (либо кораблём, либо выстрелом)
        self.ships = [] # список кораблей доски

    def __str__(self):
        """Вывод корабля на доску"""
        res = ""
        res += "  | 1 | 2 | 3 | 4 | 5 | 6 |"
        for i, row in enumerate(self.field): # в цикле проходимся по строкам доски, берём индекс и...
            res += f"\n{i + 1} | " + " | ".join(row) + " |" # ... выводим: номер строки | клетки строки

        if self.hid:
            res = res.replace("■", "0") # если True, заменяем все симолы корабля на пустые символы
        return res

    def out(self, d):
        """Проверяем нахождение точки за пределами доски"""
        return not ((0 <= d.x < self.size) and (0 <= d.y < self.size)) # условие нахождение точки в пределах доски - её нахождение в диапазоне от 0 до size

    def contour(self, ship, verb=False): # verb указывает на необходимость ставить точки (.) вокруг кораблей
        """Контур корабля"""
        near = [
            (-1, -1), (-1, 0), (-1, 1),
            (0, -1), (0, 0), (0, 1),
            (1, -1), (1, 0), (1, 1)
        ] # все точки вокруг текущей (сдвиги по диагонали и вертикали)
        for d in ship.dots: # берём каждую точку корабля...
            for dx, dy in near: # ...проходимся в цикле по списку near...
                cur = Dot(d.x + dx, d.y + dy) # ...сдвигаем исходную точку на dx и dy
                # self.field[cur.x][cur.y] = "+" # вывод плюса для точек. Это поможет для определения клеток, на которые корабли ставить нельзя.
                if not(self.out(cur)) and cur not in self.busy: # если точка не выходит за пределы доски и точка не занята...
                    if verb: #
                        self.field[cur.x][cur.y] = "." # ставим в ячейке символ точки (.)
                    self.busy.append(cur) # добавляем точку в список занятых

    def add_ship(self, ship):
        for d in ship.dots: # проверка каждой точки корабля...
            if self.out(d) or d in self.busy: # ... что она не выходит за границу и не занята.
                raise BoardWrongShipException() # вызов исключения в случае успешной проверки условия
        for d in ship.dots: # проверка каждой точки...
            self.field[d.x][d.y] = "■" # ... поставим в каждой точке квадрат...
            self.busy.append(d) # ... запишем точку в список занятых (точки расположения корабля или соседние)

        self.ships.append(ship) # добавляем список собственных кораблей
        self.contour(ship) # обводим список собственных кораблей по контуру

    def shot(self, d):
        """Выстрел"""
        if self.out(d): # выходит ли точка за границу?...
            raise BoardOutException() # ... если да, вызываем исключение

        if d in self.busy: # занята ли точка?...
            raise BoardUsedException() # ... если да, вызываем исключение о занятости точки

        self.busy.append(d) # точка занята (если не была занята)

        for ship in self.ships:
            """Проходимся в цикле по кораблям и проверяем, принадлежит ли точка какому-либо кораблю или нет"""
            if ship.shooten(d): # если корабль был подстрелен...
                ship.lives -= 1 # уменьшаем количество жизней корабля
                self.field[d.x][d.y] = "X" # ставим в эту точку икс
                if ship.lives == 0: # если у корабля кончились жизни, то...
                    self.count += 1 # прибавляем к счётчику уничтоженных кораблей единицу
                    self.contour(ship, verb=True) # обводим корабль, чтобы контур обозначился точками
                    print("Корабль уничтожен")
                    return False
                else:
                    print("Корабль ранен!")
                    return True

        self.field[d.x][d.y] = "." # если никакой корабль не поражён, срабатывает этот код
        print("Мимо!")
        return False

    def begin(self):
        self.busy = [] # обнуление списка вначале игры (храним точки выстрела игрока).

    def defeat(self):
        """Поражение"""
        return self.count == len(self.ships)

# ----------------------------------------------------------------------------------------------------------------------
class Player:
    """Игрок"""
    def __init__(self, board, enemy):
        self.board = board
        self.enemy = enemy

    def ask(self):
        raise NotImplementedError() # при попытке вызвать метод будет вызываться исключение (метод должен быть у потомков класса)

    def move(self):
        """В бесконечном цикле пытаемся сделать выстрел"""
        while True:
            try:
                target = self.ask() # просим компьютера или пользователя дать координаты выстрела
                repeat = self.enemy.shot(target) # выполняем выстрел
                return repeat # если выстрел успешен, возвращаем запрос на повторение хода
            except BoardException as e: # если выстрел не удался, печатаем исключение
                print(e)

# ----------------------------------------------------------------------------------------------------------------------
class AI(Player):
    """Класс игрок-компьютер"""
    def ask(self):
        d = Dot(randint(0, 5), randint(0, 5)) # генерируем две случайные точки от 0 до 5
        print(f"Ход компьютера: {d.x+1} {d.y+1}")
        return d

class User(Player):
    def ask(self):
        while True:
            cords = input("Ваш ход: ").split() # запрос координат

            if len(cords) != 2: # проверка, что введены две координаты
                print("Введите 2 координаты! ")
                continue

            x, y = cords

            if not (x.isdigit()) or not (y.isdigit()): # проверяем, что введённое значение - число
                print(" Введите числа! ")
                continue

            x, y = int(x), int(y)

            return Dot(x - 1, y - 1) # возвращаем нашу точку, не забыв вычесть единицу

class Game:
    """Игра"""
    def __init__(self, size=6):
        self.size = size
        pl = self.random_board() # генерируем случайную доску для игрока
        co = self.random_board() # генерируем случайную доску для компьютера
        co.hid = True # скрываем доску компьютера

        self.ai = AI(co, pl) # создание игрока AI
        self.us = User(pl, co) # создание игрока User
    def try_board(self):
        """Пытаемся создать доску и расставить на неё каждый корабль"""
        lens = [3, 2, 2, 1, 1, 1, 1] # длины кораблей
        board = Board(size=self.size) # создание доски
        attempts = 0 # количество попыток
        for l in lens: # для каждой длины корабля будем пытаться его поставить
            while True:
                attempts += 1
                if attempts > 2000:
                    return None
                ship = Ship(Dot(randint(0, self.size), randint(0, self.size)), l, randint(0, 1))
                try:
                    board.add_ship(ship) # попытка добавить корабль
                    break
                except BoardWrongShipException:
                    pass

        board.begin()
        return board

    def random_board(self):
        """Генерация случайной доски"""
        board = None # пуская доска
        while board is None: # создание доски в бесконечном цикле при условии, что доска пустая
            board = self.try_board()
        return board # возвращаем непустую доску

    def loop(self):
        """Создаём игровой цикл"""
        num = 0 # номер хода
        while True:
            print(f"""{'~' * 20}
Доска пользователя: 
{self.us.board}
{'~' * 20}
Доска компьютера:
{self.ai.board}
{'~' * 20}""")
            if num % 2 == 0: # если номер хода чётный, ходит пользователь
                print("Ходит пользователь!")
                repeat = self.us.move() # записываем результат
            else: # если номер хода нечётный, ходит компьютер
                print("Ходит компьютер!")
                repeat = self.ai.move()
            if repeat: # ход остаётся у того же игрока, если попал
                num -= 1

            if self.ai.board.defeat(): # проверка на количество поражённых кораблей, равных количеству кораблей на доске
                print("~" * 20)
                print("Пользователь выиграл!")
                break

            if self.us.board.defeat():  # проверка на количество поражённых кораблей, равных количеству кораблей на доске
                print("~" * 20)
                print("Компьютер выиграл!")
                break
            num += 1
    def start(self):
        greet()
        self.loop()

g = Game()
g.start()